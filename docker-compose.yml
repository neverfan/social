services:
    application:
        build:
            context: .
            dockerfile: ./.docker/app/Dockerfile
        volumes:
            - .:/var/www

    nginx:
        build:
            context: ./.docker/nginx
            dockerfile: Dockerfile
        expose:
            - "80"
        ports:
            - "${FORWARD_NGINX_PORT:-80}:80"
        volumes:
            - ./.docker/nginx/site.conf:/site.conf
        volumes_from:
            - application
        depends_on:
            - php-fpm
        working_dir: /var/www
        stop_grace_period: 1s
        environment:
            - ENV_NGINX_PHP_CONTAINER_HOST=php-fpm
            - ENV_NGINX_HOST=localhost
            - ENV_NGINX_PUBLIC_PATH=public
            - CRONTAB_LARAVEL_SCHEDULER_ENABLED=true
        networks:
            - social

    php-fpm:
        container_name: "php-fpm"
        build:
            context: ./.docker/php
            dockerfile: Dockerfile
        volumes:
            - .:/var/www
            - ./.docker/php/fpm-site.conf:/usr/local/etc/php-fpm.d/900-site.conf
        working_dir: /var/www
        expose:
            - "9000"
        labels:
            traefik.enable: "false"
        user: '1000'
        tty: true
        environment:
            - PHP_FPM_PM_MODE=dynamic
            - PHP_FPM_PM_MAX_CHILDREN=20
        networks:
            - social

    db1:
        image: postgres:16.4
        container_name: db1
        hostname: db1
        restart: always
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USERNAME}" ]
            interval: 5s
            timeout: 5s
            retries: 5
        environment:
            POSTGRES_REPLICA_MODE: master
            POSTGRES_MASTER_HOST: ${DB_MASTER_HOST}
            POSTGRES_REPLICA_PASSWORD: ${DB_REPLICA_PASSWORD}
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_HOST_AUTH_METHOD: trust
            PGDATA: /data/postgres
        volumes:
            - volume-db1:/data/postgres
            - ./.docker/postgres/db1/postgresql.extend.conf:/etc/postgresql/postgresql.extend.conf
            - ./.docker/postgres/db1/pg_hba.conf:/etc/postgresql/pg_hba.conf
            - ./.docker/postgres/scripts:/docker-entrypoint-initdb.d
        ports:
            - "${FORWARD_PORT_DB_1:-54321}:5432"
        networks:
            - social

    db2:
        image: postgres:16.4
        container_name: db2
        hostname: db2
        restart: always
        depends_on:
            db1:
                condition: service_healthy
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USERNAME}" ]
            interval: 5s
            timeout: 5s
            retries: 5
        environment:
            POSTGRES_REPLICA_MODE: slave
            POSTGRES_MASTER_HOST: ${DB_MASTER_HOST}
            POSTGRES_REPLICA_PASSWORD: ${DB_REPLICA_PASSWORD}
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_HOST_AUTH_METHOD: trust
            PGDATA: /data/postgres
        volumes:
            - volume-db2:/data/postgres
            - ./.docker/postgres/db2/postgresql.extend.conf:/etc/postgresql/postgresql.extend.conf
            - ./.docker/postgres/db2/pg_hba.conf:/etc/postgresql/pg_hba.conf
            - ./.docker/postgres/scripts:/docker-entrypoint-initdb.d
        ports:
            - "${FORWARD_PORT_DB_2:-54322}:5432"
        networks:
            - social

    db3:
        image: postgres:16.4
        container_name: db3
        hostname: db3
        restart: always
        depends_on:
            db1:
                condition: service_healthy
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USERNAME}" ]
            interval: 5s
            timeout: 5s
            retries: 5
        environment:
            POSTGRES_REPLICA_MODE: slave
            POSTGRES_MASTER_HOST: ${DB_MASTER_HOST}
            POSTGRES_REPLICA_PASSWORD: ${DB_REPLICA_PASSWORD}
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_HOST_AUTH_METHOD: trust
            PGDATA: /data/postgres
        volumes:
            - volume-db3:/data/postgres
            - ./.docker/postgres/db3/postgresql.extend.conf:/etc/postgresql/postgresql.extend.conf
            - ./.docker/postgres/db3/pg_hba.conf:/etc/postgresql/pg_hba.conf
            - ./.docker/postgres/scripts:/docker-entrypoint-initdb.d
        ports:
            - "${FORWARD_PORT_DB_3:-54323}:5432"
        networks:
            - social

    postgres-testing:
        image: postgres:16.4
        container_name: "postgres-testing"
        restart: always
        environment:
            POSTGRES_DB: ${TESTING_DB_DATABASE}
            POSTGRES_USER: ${TESTING_DB_USERNAME}
            POSTGRES_PASSWORD: ${TESTING_DB_PASSWORD}
            PGDATA: /data/postgres
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USERNAME}" ]
            interval: 5s
            timeout: 5s
            retries: 5
        volumes:
            - postgres-volume-testing:/data/postgres
        ports:
            - "${TESTING_FORWARD_DB_PORT:-5432}:5432"
        networks:
            - social

    influxdb:
        image: influxdb:2.7-alpine
        container_name: influxdb
        restart: unless-stopped
        ports:
            - 8086:8086
        volumes:
            - influx-data:/var/lib/influxdb2
            - ./influxdb2/conf:/etc/influxdb2
        networks:
            - social

    grafana:
        image: grafana/grafana-enterprise
        container_name: grafana
        depends_on:
            - influxdb
        restart: unless-stopped
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=password
            - GF_INSTALL_PLUGINS=grafana-clock-panel
        ports:
            - '3000:3000'
        volumes:
            - 'grafana_storage:/var/lib/grafana'
        networks:
            - social

networks:
    social:
        driver: bridge

volumes:
    volume-db1:
    volume-db2:
    volume-db3:
    postgres-volume-testing:
        driver: "local"
    influx-data: {}
    grafana_storage: {}
